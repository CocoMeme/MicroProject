#include <WiFi.h>
#include <PubSubClient.h>
#include <HardwareSerial.h>

// === WiFi & MQTT Configuration ===
const char* ssid = "HUAWEI-2.4G-sV8k";
const char* password = "7wGwXPfD";
const char* mqtt_server = "10.195.139.227";

// === MQTT Client Setup ===
WiFiClient espClient;
PubSubClient client(espClient);

// === GSM UART Setup ===
HardwareSerial gsmSerial(1);  // Use UART1 (RX=16, TX=17)

// === WiFi Setup Function ===
void setup_wifi() {
  Serial.print("Connecting to WiFi: ");
  Serial.println(ssid);
  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);

  int retries = 0;
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
    if (++retries > 20) {
      Serial.println("\n[ERROR] WiFi failed. Restarting...");
      delay(2000);
      ESP.restart();
    }
  }

  Serial.println("\n[INFO] WiFi connected.");
  Serial.print("IP address: ");
  Serial.println(WiFi.localIP());
}

// === MQTT Reconnection ===
void reconnect() {
  while (!client.connected()) {
    Serial.print("Connecting to MQTT...");
    if (client.connect("ESP32_GSM_SMS")) {
      Serial.println("connected.");
      client.subscribe("esp32/gsm/send");  // Subscribe to GSM send command
    } else {
      Serial.print("failed (rc=");
      Serial.print(client.state());
      Serial.println("). Retrying in 5 sec.");
      delay(5000);
    }
  }
}

// === GSM SMS Sending Function ===
void sendGSMMessage(String phoneNumber, String message) {
  Serial.println("[GSM] Sending message...");
  Serial.print("[GSM] To: ");
  Serial.println(phoneNumber);
  Serial.print("[GSM] Message: ");
  Serial.println(message);

  gsmSerial.println("AT+CMGF=1");  // Set SMS text mode
  delay(500);

  gsmSerial.print("AT+CMGS=\"");
  gsmSerial.print(phoneNumber);
  gsmSerial.println("\"");
  delay(500);

  gsmSerial.println(message);  // Message content
  delay(500);

  gsmSerial.write(26);  // CTRL+Z to send
  delay(1000);

  Serial.println("[GSM] Message sent successfully.");
}

// === MQTT Callback ===
void callback(char* topic, byte* payload, unsigned int length) {
  String msg;
  for (unsigned int i = 0; i < length; i++) msg += (char)payload[i];

  if (String(topic) == "esp32/gsm/send" && msg.startsWith("start:")) {
    Serial.println("[MQTT] GSM Send Command Received");
    Serial.print("[MQTT] Full message: ");
    Serial.println(msg);
    
    // Extract phone number from message format: "start:+639612903652"
    String phoneNumber = msg.substring(6); // Remove "start:" prefix
    String message = "Your Parcel is Being Delivered";
    
    // Convert Philippine local format (09xxxxxxxx) to international format (+639xxxxxxxx)
    if (phoneNumber.startsWith("09") && phoneNumber.length() == 11) {
      phoneNumber = "+63" + phoneNumber.substring(1); // Replace "0" with "+63"
      Serial.println("[INFO] Converted local PH format to international format");
    }
    
    Serial.print("[INFO] Final Phone Number: ");
    Serial.println(phoneNumber);
    Serial.print("[INFO] Message: ");
    Serial.println(message);
    
    if (phoneNumber.length() > 0 && message.length() > 0) {
      Serial.println("[INFO] Sending SMS with fixed message");
      Serial.print("[INFO] Phone: ");
      Serial.println(phoneNumber);
      Serial.print("[INFO] Message: ");
      Serial.println(message);
      
      sendGSMMessage(phoneNumber, message);
      
      // Send confirmation back via MQTT (send original number for debugging)
      String confirmMsg = "{\"status\":\"sent\",\"phone\":\"" + phoneNumber + "\",\"original\":\"" + msg + "\"}";
      client.publish("esp32/gsm/status", confirmMsg.c_str());
      
      Serial.print("[INFO] Confirmation sent: ");
      Serial.println(confirmMsg);
      
    } else {
      Serial.println("[ERROR] Phone number or message is empty");
      client.publish("esp32/gsm/status", "{\"status\":\"error\",\"message\":\"Empty phone or message\"}");
    }
  }
}

// === Main GSM SMS Function ===
void initGSMSMSModule() {
  Serial.begin(115200);
  gsmSerial.begin(9600, SERIAL_8N1, 16, 17);  // RX=16, TX=17 (GSM)

  Serial.println("[INFO] ESP32 GSM SMS Module Starting...");
  
  setup_wifi();
  client.setServer(mqtt_server, 1883);
  client.setCallback(callback);

  delay(3000);  // Wait for GSM module to boot
  
  Serial.println("[INFO] GSM Module Ready. Waiting for SMS requests on esp32/gsm/send...");
}

// === Maintain Connection Function ===
void maintainGSMConnection() {
  if (WiFi.status() != WL_CONNECTED) {
    Serial.println("[WARNING] WiFi lost. Reconnecting...");
    setup_wifi();
  }

  if (!client.connected()) {
    reconnect();
  }
  
  client.loop();
}

// === Setup ===
void setup() {
  initGSMSMSModule();
}

// === Loop ===
void loop() {
  maintainGSMConnection();
}