#include <WiFi.h>
#include <PubSubClient.h>
#include <ESP32Servo.h>

// === Wi-Fi & MQTT Config ===
const char* ssid = "HUAWEI-2.4G-sV8k";
const char* password = "7wGwXPfD";
const char* mqtt_server = "192.168.100.63";

// === MQTT Client Setup ===
WiFiClient espClient;
PubSubClient client(espClient);
bool measure_active = false;

// === Servo and Pins ===
Servo myServo;
const int servoPin = 4;

// === Ultrasonic Sensor Pins ===
const int trigPin1 = 12;  // Top
const int echoPin1 = 14;
const int trigPin2 = 27;  // Front Left
const int echoPin2 = 26;
const int trigPin3 = 25;  // Front Right
const int echoPin3 = 33;

long duration;
float boxWidth = 0.0;
float boxLength = 0.0;
float boxHeight = 0.0;

void setup_wifi() {
  Serial.print("Connecting to WiFi: ");
  Serial.println(ssid);
  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);
  int retries = 0;

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
    retries++;
    if (retries > 20) {
      Serial.println("\n[ERROR] WiFi failed. Restarting ...");
      delay(2000);
      ESP.restart();
    }
  }

  Serial.println("\n[INFO] WiFi connected.");
  Serial.print("IP address: ");
  Serial.println(WiFi.localIP());
}

void reconnect() {
  while (!client.connected()) {
    Serial.print("Connecting to MQTT...");
    if (client.connect("ESP32_BOX_CLASSIFIER")) {
      Serial.println("connected.");
      client.subscribe("esp32/box/request");
    } else {
      Serial.print("failed, rc=");
      Serial.print(client.state());
      Serial.println(" retrying in 5 seconds...");
      delay(5000);
    }
  }
}

float readDistanceCM(int trigPin, int echoPin) {
  digitalWrite(trigPin, LOW); delayMicroseconds(2);
  digitalWrite(trigPin, HIGH); delayMicroseconds(10);
  digitalWrite(trigPin, LOW);
  duration = pulseIn(echoPin, HIGH, 30000);
  if (duration == 0) return -1;
  return duration * 0.034 / 2;
}

float cmToInch(float cm) {
  return cm / 2.54;
}

String classifyBox(float width, float length, float height) {
  Serial.println("==== FINAL DIMENSIONS ====");
  Serial.print("Width: "); Serial.print(width); Serial.println(" in");
  Serial.print("Length: "); Serial.print(length); Serial.println(" in");
  Serial.print("Height: "); Serial.print(height); Serial.println(" in");

  if (length >= 5.ðŸ˜Ž
    return "ðŸ“¦ Large";
  else if (length >= 4.5)
    return "ðŸ“¦ Medium";
  else
    return "ðŸ“¦ Small";
}

void classifyAndMeasureBox() {
  Serial.println("Holding at 0Â° (5 deg)...");
  delay(4000);

  float d1_cm = readDistanceCM(trigPin1, echoPin1); // Top
  float d2_cm = readDistanceCM(trigPin2, echoPin2); // Front Left
  float d3_cm = readDistanceCM(trigPin3, echoPin3); // Front Right

  float d1_in = cmToInch(d1_cm);
  float d2_in = cmToInch(d2_cm);
  float d3_in = cmToInch(d3_cm);

  boxHeight = 9.2 - d1_in;
  boxWidth = 10.5 - (d2_in + d3_in);

  delay(1500);
  Serial.println("Rotating to 105Â°...");
  for (int pos = 5; pos <= 105; pos++) {
    myServo.write(pos);
    delay(20);
  }

  delay(4000);

  float d2b_cm = readDistanceCM(trigPin2, echoPin2);
  float d3b_cm = readDistanceCM(trigPin3, echoPin3);
  float d2b_in = cmToInch(d2b_cm);
  float d3b_in = cmToInch(d3b_cm);

  boxLength = 10.5 - (d2b_in + d3b_in);

  delay(1000);

  String result = classifyBox(boxWidth, boxLength, boxHeight);
  Serial.println(result);
  Serial.println("==========================");

  // Publish result to MQTT
  String message = "W: " + String(boxWidth, 2) + " in, " +
                   "L: " + String(boxLength, 2) + " in, " +
                   "H: " + String(boxHeight, 2) + " in â†’ " + result;
  client.publish("esp32/box/result", message.c_str());

  delay(2000);

  Serial.println("Returning to 5Â°...");
  for (int pos = 105; pos >= 5; pos--) {
    myServo.write(pos);
    delay(20);
  }

  delay(3000);
}

void callback(char* topic, byte* payload, unsigned int length) {
  String msg;
  for (unsigned int i = 0; i < length; i++) {
    msg += (char)payload[i];
  }

  if (String(topic) == "esp32/box/request") {
    if (msg == "start") {
      measure_active = true;
    } else if (msg == "stop") {
      measure_active = false;
    }
  }
}

void setup() {
  Serial.begin(115200);

  // Setup Servo
  myServo.setPeriodHertz(50);
  myServo.attach(servoPin, 500, 2400);
  myServo.write(5);
  Serial.println("Servo initialized at 5Â°");

  // Setup Ultrasonic Pins
  pinMode(trigPin1, OUTPUT); pinMode(echoPin1, INPUT);
  pinMode(trigPin2, OUTPUT); pinMode(echoPin2, INPUT);
  pinMode(trigPin3, OUTPUT); pinMode(echoPin3, INPUT);

  // Setup WiFi and MQTT
  setup_wifi();
  client.setServer(mqtt_server, 1883);
  client.setCallback(callback);
}

void loop() {
  if (WiFi.status() != WL_CONNECTED) setup_wifi();
  if (!client.connected()) reconnect();
  client.loop();

  if (measure_active) {
    classifyAndMeasureBox();
    delay(5000);
    measure_active = false;  // Only run once per "start" message
  }
}