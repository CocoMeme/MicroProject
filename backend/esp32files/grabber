#include <WiFi.h>
#include <PubSubClient.h>
#include <Stepper.h>
#include <ESP32Servo.h>

// === WiFi & MQTT Configuration ===
const char* ssid = "HUAWEI-2.4G-sV8k";
const char* password = "7wGwXPfD";
const char* mqtt_server = "10.195.139.227";

// === MQTT Client Setup ===
WiFiClient espClient;
PubSubClient client(espClient);

// === Stepper Motor Configuration ===
const int stepsPerRevolution = 2048;
const int stepPerReverse = -2048;

const int IN1 = 18;
const int IN2 = 19;
const int IN3 = 21;
const int IN4 = 22;

Stepper stepper(stepsPerRevolution, IN1, IN3, IN2, IN4);

// === Servo Configuration ===
Servo servoRight;
Servo servoLeft;
const int servoRightPin = 13;
const int servoLeftPin = 32;

// === Control Flag ===
bool parcel_active = false;

// === WiFi Setup ===
void setup_wifi() {
  Serial.print("Connecting to WiFi: ");
  Serial.println(ssid);
  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);

  int retries = 0;
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
    if (++retries > 20) {
      Serial.println("\n[ERROR] WiFi failed. Restarting...");
      delay(2000);
      ESP.restart();
    }
  }

  Serial.println("\n✅ WiFi connected.");
  Serial.print("📶 IP address: ");
  Serial.println(WiFi.localIP());
}

// === MQTT Callback ===
void callback(char* topic, byte* payload, unsigned int length) {
  String msg;
  for (unsigned int i = 0; i < length; i++) msg += (char)payload[i];

  if (String(topic) == "esp32/parcel/request") {
    if (msg == "start") {
      parcel_active = true;
      Serial.println("🚀 Parcel process STARTED via MQTT");
      client.publish("esp32/parcel/status", "started");
    } else if (msg == "stop") {
      parcel_active = false;
      Serial.println("🛑 Parcel process STOPPED via MQTT");
      client.publish("esp32/parcel/status", "stopped");
    }
  }
}

// === MQTT Reconnect ===
void reconnect() {
  while (!client.connected()) {
    Serial.print("🔁 Connecting to MQTT...");
    
    // Create unique client ID using MAC address
    String clientId = "ESP32_GRABBER_" + WiFi.macAddress();
    clientId.replace(":", ""); // Remove colons from MAC address
    
    if (client.connect(clientId.c_str())) {
      Serial.println("connected!");
      Serial.println("Client ID: " + clientId);
      client.subscribe("esp32/parcel/request");
    } else {
      Serial.print("❌ failed (rc=");
      Serial.print(client.state());
      Serial.println("). Retrying...");
      delay(5000);
    }
  }
}

// === Servo Functions ===
void servograb() {
  servoRight.write(123);
  servoLeft.write(23);
}

void servorelease() {
  servoRight.write(108);
  servoLeft.write(38);
}

// === Main Parcel Handling Logic ===
void handleParcel() {
  Serial.println("🔧 Grabbing parcel...");
  client.publish("esp32/parcel/status", "Grabbing parcel...");
  servograb();
  delay(2000);

  Serial.println("🔄 Rotating 90° forward...");
  client.publish("esp32/parcel/status", "Rotating 90° forward");
  stepper.step(stepsPerRevolution / 4);
  delay(2000);

  Serial.println("🤲 Releasing parcel...");
  client.publish("esp32/parcel/status", "Releasing parcel");
  servorelease();
  delay(2000);

  Serial.println("🔁 Rotating back...");
  client.publish("esp32/parcel/status", "Rotating back");
  stepper.step(stepPerReverse / 4);
  delay(2000);
}

// === Setup ===
void setup() {
  Serial.begin(115200);

  setup_wifi();
  client.setServer(mqtt_server, 1883);
  client.setCallback(callback);

  stepper.setSpeed(10);

  servoRight.setPeriodHertz(50);
  servoLeft.setPeriodHertz(50);
  servoRight.attach(servoRightPin, 500, 2400);
  servoLeft.attach(servoLeftPin, 500, 2400);

  servorelease(); // Initial position
  delay(1000);

  Serial.println("✅ System ready. Awaiting MQTT command...");
  client.publish("esp32/parcel/status", "System ready");
}

// === Loop ===
void loop() {
  if (WiFi.status() != WL_CONNECTED) setup_wifi();
  if (!client.connected()) reconnect();
  client.loop();

  if (parcel_active) {
    handleParcel();
    delay(5000);  // Wait before next cycle
  }
}